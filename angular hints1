1) standalone input
[ngModelOptions]="{standalone: true}"

2) generate component without unit tests
    ng g c component-name --spec false
    
3) IE 
    https://blog.angularindepth.com/angular-and-internet-explorer-5e59bb6fb4e9
    
4) form groups
    1. 
    export class Component implements OnInit{
        public form: FormGroup;
        
        constructor(
            private _fb: FormBuilder);
            
        public async ngOnInit() {
            this.form = this._fb.group({
                name: '',
                code: '',
                prop: ''
            });
         }
    }
    
    <form [formGroup]="productType">
        <div fxLayout="row" fxLayoutAlign="space-between" flex100>
             <mat-input-container flex35>
                   <input matInput placeholder="Name" formControlName="productName">
                        <mat-hint align="end">
                            {{form.value.name?.length}} / 30
                        </mat-hint>
              </mat-input-container>
         </div>
     </form>
     
  5) directive (full)

@Directive({
  selector: '[appOnlyOneDotNumber]'
})
export class OnlyOneDotNumberDirective {
  private el: HTMLInputElement;
  private regEx =  /^(([\d]{1,5})(\.[\d]{0,2})?)?$/;

  constructor(private element: ElementRef) {
    this.el = this.element.nativeElement;
  }

  @HostListener('keydown', ['$event']) onKeyDown(e){
    if ([46, 8, 9, 27, 13, 110].indexOf(e.keyCode) !== -1 ||
      // Allow: Ctrl+A
      (e.keyCode === 65 && e.ctrlKey === true) ||
      // Allow: Ctrl+C
      (e.keyCode === 67 && e.ctrlKey === true) ||
      // Allow: Ctrl+V
      (e.keyCode === 86 && e.ctrlKey === true) ||
      // Allow: Ctrl+X
      (e.keyCode === 88 && e.ctrlKey === true) ||
      // Allow: home, end, left, right
      (e.keyCode >= 35 && e.keyCode <= 39)) {
      // let it happen, don't do anything
      return;
    }
    if (!this.regEx.test(this.el.value + e.key)) {
      e.preventDefault();
    }
  }

  @HostListener('blur', ['$event']) onBlur() {
    if (this.el.value.substr(this.el.value.length - 1) === '.'){
      this.el.value = this.el.value.substr(0, this.el.value.length - 1);
    }
  }
}
