1) standalone input
[ngModelOptions]="{standalone: true}"

2) generate component without unit tests
    ng g c component-name --spec false
    
3) IE 
    https://blog.angularindepth.com/angular-and-internet-explorer-5e59bb6fb4e9
    
4) form groups
    1. 
    export class Component implements OnInit{
        public form: FormGroup;
        
        constructor(
            private _fb: FormBuilder);
            
        public async ngOnInit() {
            this.form = this._fb.group({
                name: '',
                code: '',
                prop: ''
            });
         }
    }
    
    <form [formGroup]="productType">
        <div fxLayout="row" fxLayoutAlign="space-between" flex100>
             <mat-input-container flex35>
                   <input matInput placeholder="Name" formControlName="productName">
                        <mat-hint align="end">
                            {{form.value.name?.length}} / 30
                        </mat-hint>
              </mat-input-container>
         </div>
     </form>
     
  5) directive (full)

@Directive({
  selector: '[appOnlyOneDotNumber]'
})
export class OnlyOneDotNumberDirective {
  private el: HTMLInputElement;
  private regEx =  /^(([\d]{1,5})(\.[\d]{0,2})?)?$/;
  private lastInput: any;

  constructor(private element: ElementRef) {
    this.el = this.element.nativeElement;
  }

  @HostListener('paste', ['$event']) blockPaste(e: KeyboardEvent) {
    e.preventDefault();
  }

  @HostListener('cut', ['$event']) blockCut(e: KeyboardEvent) {
    e.preventDefault();
  }

  @HostListener('keydown', ['$event']) onKeyDown(e) {
    if(e.keyCode === 8 || e.keyCode === 46){
      let caretPosition = this.el.selectionStart;
      let str = '';
      if(e.keyCode === 8 ){
        str = this.el.value.slice(0, caretPosition - 1) + this.el.value.slice(caretPosition, this.el.value.length + 1);
      }
      if(e.keyCode === 46){
        str = this.el.value.slice(0, caretPosition) + this.el.value.slice(caretPosition + 1, this.el.value.length + 1);
      }
      if (!this.regEx.test(str)) {
        e.preventDefault();
        this.el.value = this.lastInput;
      } else {
        this.lastInput = str;
      }
    };
  }

  @HostListener('keypress', ['$event']) onKeyPress(e){
    let caretPosition = this.el.selectionStart;
    let str = this.el.value.slice(0,caretPosition) + e.key + this.el.value.slice(caretPosition, this.el.value.length + 1);

    if (!this.regEx.test(str)) {
      this.el.value = this.lastInput;
      e.preventDefault();
    } else {
      this.lastInput = str;
    }
  }

  @HostListener('focus', ['$event']) onFocus() {
    this.lastInput = this.el.value;
  }

  @HostListener('blur', ['$event']) onBlur() {
    if (this.el.value.substr(this.el.value.length - 1) === '.'){
      this.el.value = this.el.value.substr(0, this.el.value.length - 1);
    }
  }
}

6) ng g c componentname --spec false (without tests)

7) detecting background loaded
        https://medium.com/@kittycatbytes/check-background-image-load-event-in-angular-7be87b308fad
        
8) text mask
        https://www.npmjs.com/package/angular2-text-mask
        
9) smooth scroll
    https://www.npmjs.com/package/@nicky-lenaers/ngx-scroll-to'
    
10) pass matching validator 

        const form = new FormGroup({
          password: new FormControl('', Validators.minLength(2)),
          passwordConfirm: new FormControl('', Validators.minLength(2)),
        }, passwordMatchValidator);


        function passwordMatchValidator(g: FormGroup) {
           return g.get('password').value === g.get('passwordConfirm').value
              ? null : {'mismatch': true};
        }
        
        const form = new FormGroup({
          password: new FormControl('')
          passwordConfirm: new FormControl('')
        }, { validators: passwordMatchValidator, asyncValidators: otherValidator });
