1) angular routes
    import { Routes, RouterModule } from '@angular/router';
    
    const appRoutes: Routes = [
      {path: '', component: HomeComponent},
      {path: 'users', component: UsersComponent},   
      {path: 'servers', component: ServersComponent},
    ]
    
    @ngModule({
      imports: [RouterModule.forRoot(appRoutes)]
    }
    
    <router-outlet></router-outlet>
    
    <a routerLink="/users"></a>  - absolute path
    <a routerLink="users"></a> - relative path
    <a routerLink="./users"></a> - in this level
    <a routerLink="../users"></a> - in upper level
    <a routerLink="/users" 
        routerLinkActive="activeClass"
        [routerLinkActiveOptions]="{exact:true}"></a> - full path matching
    <a [routerLink]="['/users', 10, 'Anna']"></a>
    
    constructor(private router: Router, private route: ActivatedRoute){}
    
    onLoadServers(){
      this.router.navigate(['/servers']); - absolute path
      this.router.navigate(['servers'], {relativeTo: this.route); - relative path
    }
    
2) dynamic part of route

  const appRoutes: Routes = [      
      {path: 'users/:id/:name', component: UsersComponent}, - id - dynamic part of route     
    ]
        
     paramsSubscription: Subscription;   
     constructor(private router: Router, private route: ActivatedRoute){}
     
     ngOnInit(){
        this.user = {
            id: this.route.snapshot.params['id'],
            name:  this.route.snapshot.params['name']
        };
        
        this.paramsSubscription = this.route.params.subscribe((params: Params) => {
            this.user.id = params['id'];
            this.user.name = params['name'];
        });
     }
     
     ngOnDestroy() {
        this.paramsSubscription.unsubscribe(); - We do not need to do this, Angular does it automatically
     }
     
3) query parameters and fragments

    const appRoutes: Routes = [      
      {path: 'servers/:id/edit', component: UsersComponent}, - id - dynamic part of route     
    ]
    
    <a [routerLink]="['/servers', 5, 'edit']"
       [queryParams]="{allowEdit:'1'}"
       fragment='loading></a>   - /servers/5/edit?allowEdit=1#loading
   
     constructor(private router: Router, private route: ActivatedRoute){}
     
     ngOnInit(){        
        console.log(this.route.snapshot.queryParams);        
        console.log(this.route.snapshot.fragment)
        
        this.paramsSubscription = this.route.queryParams.subscribe();
        this.paramsSubscription = this.route.fragment.subscribe();
     }
     
     onLoadServer(id:number) {
        //this.router.navigate(['/servers', id, 'edit], {queryParams: {allowEdit: '1'}, fragment: 'loading');
        this.router.navigate(['edit'], {relativeTo: this.route, queryParamsHandling: 'preserve'}) -- or queryParamsHandling: 'merge'
     }     
     
4) children routes

    const appRoutes: Routes = [
      {path: '', component: HomeComponent},
      {path: 'users', component: UsersComponent},   
      {path: 'servers', component: ServersComponent, children: [
         {path: ':id', component: ServerComponent},
         {path: ':id/edit', component: EditServerComponent},
      ]}
    ]
    
 5) not found
 
   const appRoutes: Routes = [
      {path: '', component: HomeComponent},
      {path: 'users', component: UsersComponent},        
      { path: 'not-found', component: PageNotFoundComponent },
      { path: '**', redirectTo: '/not-found'} -- wildcard route - must be the last in routes array
    ]
     
 6) guards
    
    @Injectable()
    export class AuthGuard implements CanActivate, CanActivateChild {
        constructor(private authService: AuthService, private router: Router) {}
        
        canActivate(route ActivatedRouteSnapshot,
                    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {
           this.authService.isAuthenticated().then(
                (authenticated: boolean) => {
                    if (authenticated) {
                        return true;
                    } else {
                        this.router.navigate(['/']);
                    }
                }
           );
        }
        
        canActivateChild(route ActivatedRouteSnapshot,
                    state: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean{
           this.authService.isAuthenticated().then(
                (authenticated: boolean) => {
                    if (authenticated) {
                        return true;
                    } else {
                        this.router.navigate(['/servers']);
                    }
                }
           );
        }
    }
    
    const appRoutes: Routes = [
      {path: '', component: HomeComponent},     
      {path: 'servers', canActivate[AuthGuard], canActivateChild[AuthGuard] component: ServersComponent, children: [
         {path: ':id', component: ServerComponent},
         {path: ':id/edit', component: EditServerComponent},
      ]}
    ]
  
7) can deactivate - when we leaving the route
  
    export interface CanComponentDeactivate {               --- implement this interface in the component
        canDeactivate: () => Observable<boolean> | Promise<boolean> | boolean;
    }
    
    export class CanDeactivateGuard implements CanDeactivate<CanComponentDeactivate>{
        canDeactivate(component: CanComponentDeactivate,
                      currentRoute: ActivatedRouteSnapshot,
                      currentState: RouterStateSnapshot,
                      nextState?: RouterStateSnapshot): Observable<boolean> | Promise<boolean> | boolean {
             return component.canDeactivate();
        }
    }
    
    const appRoutes: Routes = [
      {path: '', component: HomeComponent},     
      {path: 'servers', canActivate[AuthGuard], canActivateChild[AuthGuard] component: ServersComponent, children: [
         {path: ':id', component: ServerComponent},
         {path: ':id/edit', component: EditServerComponent, canDeactivate [CanDeactivateGuard]},
      ]}
    ]
    
    // in component
       canDeactivate(): Observable<boolean> | Promise<boolean> | boolean{
        if(!this.allowEdit){
            return true;        
        }
        if ((this.serverName !== this.server.name)) && this.changesSaved){
            return confirm('Do you want to discard the cnanges?');
        } else {
            return true;
        }
       } 

  8) passing data to the route
  
     const appRoutes: Routes = [
      {path: '', component: HomeComponent},       
      { path: 'not-found', component: ErrorPageComponent, data: {message: 'Page not found'} }, - to get subscribe >> this.route.data (ActivatedRoute)
      { path: '**', redirectTo: '/not-found'} 
    ]
    
 9) resolver - before render the component 
    Server - custom interface 
    
    @Injectable()
    export class ServerResolver implements Resolve<Server>{
        constructor(private serversService: ServersService){}
    
        resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):  Observable<Server> | Promise<Server> | Server {
            return this.serversService.getServer(+route.params['id']);
        }
    }
    
    const appRoutes: Routes = [
      {path: '', redirectTo:'/servers, pathMatch: 'full'},       
      { {path: 'servers', component: ServersComponent, children: [
         {path: ':id', component: ServerComponent, resolve: {server: ServerResolver},
         {path: ':id/edit', component: EditServerComponent},
      ]}
    ]
    
    ---
    component on init ->> this.route.data.subscribe();
    
10) example for level up
    this.router.navigate(['../', this.id, 'edit'],{relativeTo: this.route});
 
