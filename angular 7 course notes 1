1) project setup
    npm install -g @angular/cli
    ng new my-app
    cd my-app
    ng serve
    
    npm - node package manager
    
2) decorators: 
        class:
    @Component()
    @NgModule()
    @Directive()
    @Pipe()
    @Injectable()
        variables:
    @Input()
    @Output()
    @ViewChild()
    @ContentChild()
    @HostBinding() - directives
        method:
    @HostListener() - directives
    @Input set method(){} - execute method when this input property changes(directive)
    
3) attribute selectors 
    <div app-servers> </div>
    @Component({
      selector: '[app-servers]',...
    })
    
   class selectors:
   <div class='app-servers'> </div>
    @Component({
      selector: '.app-servers',...
    })
    
4) directives:
    * - structural directive - changes structure of dom
          *ngIf
          *ngFor
     - attribute directives - change properties of elements
          [ngStyle]='{color: green}'
          [ngClass]='{online: true}'
          [ngSwitch]="value"  --- child *ngSwitchCase='2' *ngSwitchDefault
    ----
    <p> *ngIf="serverCreated; else noServer">erewr</p>
    <ng-template #noServer>
      <p>text</p>
    </ng-template>
    ----
    <p> *ngFor="let logItem of log; let i = index">erewr</p>
    ----
    @Directive({
        selector:'[appBasicHightlight]' - attribute directive
    })
    export class BasicDirective implements OnInit{
        @Input() defaultColor: string = 'transparent';
        @Input() highlightColor: string = 'blue';
        @HostBinding('style.backgroundColor') backgroundColor: string ;
        constructor(
            private elementRef: ElementRef,
            private renderer: Renderer2){
        }
        ngOnInit() {
            //this.elementRef.nativeElement.style.backgroundColor = 'green'
           // this.renderer.setStyle(this.elRef.nativeElement, 'background-color','blue') 
           this.backgroundColor= this.defaultColor;
        }
        @HostListener('mouseenter') mouseover(eventData: Event){
           // this.renderer.setStyle(this.elRef.nativeElement, 'background-color','red') 
           this.backgroundColor = this.highlightColor;
        }
        @HostListener('mouseleave') mouseleave(eventData: Event){
           // this.renderer.setStyle(this.elRef.nativeElement, 'background-color','transparent') 
           this.backgroundColor = this.defaultColor;
        }
    }
    ----
    @Directive({
        selector:'[appUnless]' 
    })
    export class StructuralDirective implements OnInit{
        @Input() set appUnless(condition:boolean){ - must be the same as selector
            if(!condition){
                this.vcRef.createEmbeddedView(this.templateRef);
            } else {
                this.vcRef.clear();
            }
        }
        
        constructor(private templateRef: TemplateRef<any>,
                    private vcRef: ViewContainerRef){  }
        
    }
    
5) models
    export class Ingredint {
        constructor(public name: string, public amount: number) {}
     }
     
6) augury
    https://chrome.google.com/webstore/detail/augury/elgalmkoelokbchhkhacckoklkejnhcd
    
7) input alias
       @Input('nameOfProperty') element: {type:string, name: string};
       @Input('nameOfEvent') event = new EventEmitter<{type:string, name: string}>();
       
8) css encapsulation 
    @Component({
        encapsulation: ViewEncapsulation.None - for all files
        encapsulation: ViewEncapsulation.Native - for some browsers
        encapsulation: ViewEncapsulation.Emulated - encapsulated (default)
    })
    
9) local reference 
     <input #serverNameInput> - can use this variable in template (type : HTMLInputElement)
     @ViewChild('serverNameInput') serverNameInputVariable: ElementRef - #serverNameInput - in html
     @ViewChild(ChildComponent) serverNameInputVariable: ElementRef - find first occurence
     @ContentChild('childRef') contentChild: ElementRef;
    
    
10) ng-content
        <ng-content></ng-content> - displays what we put in component tag
        
11) lifecycle hooks
        -- ngOnChanges - called after a bound input property changes
        -- ngOnInit - Called once the component is initialized - runs after the constructor
        -- ngDoCheck - Called during every change detection run
        -- ngAfterContentInit - called after content (ng-content) has been projected into view
        -- ngAfterContentChecked - Called every time the projected content has been checked
        -- ngAfterViewInit - called after the components view (and child views) has been initialized !! can reach @ViewChild variables
        -- ngAfterViewChecked - called every time the view (and child views) have been checked
        -- ngOnDestroy - called once the component is about to be destroyed
        
        ngOnChanges(changes: SimpleChanges){}
        

